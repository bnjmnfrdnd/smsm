@page "/"
@page "/Data"

@using smsm.Data.Services
@inject ContentService contentService
@inject LogService logService

<PageTitle>Dashboard</PageTitle>

<div class="container-fluid mt-5">


    <div class="row mt-5" style="text-align:center">
        <h3>Simple Media Server Manager (SMSM)</h3>
    </div>
    <div class="row justify-content-evenly mt-5">
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-5">
            <div class="card-body-custom">
                <BarChart @ref="contentBarChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-5">
            <div class="card-body-custom">
                <PieChart @ref="contentRequestPieChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
    </div>
    <div class="row justify-content-evenly">
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-5">
            <div class="card-body-custom">
                <LineChart @ref="contentRequestLineChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-5">
            <div class="card-body-custom">
                <DoughnutChart @ref="contentRequestDoughnutChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
    </div>
</div>

@code {
    string[] contentLabels = { "Movies", "TV Series", "Documentaries" };
    string[] contentRequestLabels = { "Complete", "Incomplete" };
    List<string> contentRequestDateLabels = new List<string>();
    private List<smsm.Data.Models.ContentRequest>? contentRequestList;
    private List<smsm.Data.Models.Content>? contentList;

    BarChart<double> contentBarChart;
    PieChart<double> contentRequestPieChart;
    LineChart<double> contentRequestLineChart;
    DoughnutChart<double> contentRequestDoughnutChart;

    List<string> chartBackgroundColors = new List<string>
    {
    ChartColor.FromRgba(97,0,109, 0.5f),
    ChartColor.FromRgba(192,0,255, 0.5f),
    ChartColor.FromRgba(109,0,171, 0.5f),
    };
    List<string> chartBorderColors = new List<string>
    {
    ChartColor.FromRgba(0,0,0, 1f),
    };

    List<double> ContentDataSet()
    {
        return new List<double> {
    contentList.Where(x => x.Type == "Movie").ToList().Count,
    contentList.Where(x => x.Type == "TV Series").ToList().Count,
    contentList.Where(x => x.Type == "Documentary").ToList().Count
    };
    }

    List<double> ContentRequestDataSet()
    {
        return new List<double> {
    contentRequestList.Where(x => x.IsComplete).ToList().Count,
    contentRequestList.Where(x => !x.IsComplete).ToList().Count
    };
    }

    List<double> ContentRequestTypeDataSet()
    {
        return new List<double> {
    contentRequestList.Where(x => x.Type == "Movie").ToList().Count,
    contentRequestList.Where(x => x.Type == "TV Series").ToList().Count,
    contentRequestList.Where(x => x.Type == "Documentary").ToList().Count
    };
    }

    List<double> ContentRequestTimeLineDataSet()
    {
        List<double> contentTimeLine = new List<double>();

        for (DateTime date = DateTime.Now.AddDays(-30); date < DateTime.Now; date = date.AddDays(1))
        {
            contentRequestDateLabels.Add(date.ToShortDateString());
        }

        foreach (string date in contentRequestDateLabels)
        {
            DateTime dateAdjusted = DateTime.Parse(date);
            var t = contentRequestList.Where(x => x.CreatedDateTime.Date == dateAdjusted).ToList();

            contentTimeLine.Add(
            contentRequestList.Where(x => x.CreatedDateTime.Date == dateAdjusted).ToList().Count
            );
        }
        return contentTimeLine;
    }

    protected override async Task OnInitializedAsync()
    {
        contentList = await contentService.GetContentDashboardAsync();
        contentRequestList = await contentService.GetContentRequestsDashboardAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await contentRequestDoughnutChart.Clear();
            await contentRequestDoughnutChart.AddLabelsDatasetsAndUpdate(contentLabels, GetContentRequestTypeChartDataset());
            await contentRequestLineChart.Clear();
            await contentRequestLineChart.AddLabelsDatasetsAndUpdate(contentRequestDateLabels, GetContentRequestTimeLineChartDataset());
            await contentRequestPieChart.Clear();
            await contentRequestPieChart.AddLabelsDatasetsAndUpdate(contentRequestLabels, GetContentRequestChartDataset());
            await contentBarChart.Clear();
            await contentBarChart.AddLabelsDatasetsAndUpdate(contentLabels, GetContentChartDataset());
        }
    }

    private BarChartDataset<double> GetContentChartDataset()
    {
        return new()
            {
                Label = "Total content",
                Data = ContentDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
    }

    private PieChartDataset<double> GetContentRequestChartDataset()
    {
        return new()
            {
                Label = "Complete/Incomplete Requests",
                Data = ContentRequestDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
    }

    LineChartDataset<double> GetContentRequestTimeLineChartDataset()
    {
        return new LineChartDataset<double>
            {
                Label = "Requests in the last 30 days",
                Data = ContentRequestTimeLineDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
                
            };
    }

    DoughnutChartDataset<double> GetContentRequestTypeChartDataset()
    {
        return new DoughnutChartDataset<double>
            {
                Label = "Most requested",
                Data = ContentRequestTypeDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
            };
    }
}

