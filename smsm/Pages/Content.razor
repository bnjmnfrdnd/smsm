@page "/Content"

@using smsm.Data.Models
@using smsm.Data.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ContentService contentService

<PageTitle>Content</PageTitle>

@if (contentForm)
{
    <form @onsubmit="SaveNewContent">
        <div class="card-custom p-5">
            <div class="card-body-custom">
                <h3 class="mb-2">@contentFormTitle</h3>
                <div class="row">
                    <div class="form-group col-12">
                        <label for="newContentTypeInput">Type</label>
                        <select class="form-control" id="newContentTypeInput" @bind="contentModel.Type">
                            <option value=""></option>
                            <option value="Movie">Movie</option>
                            <option value="TV Series">TV Series</option>
                            <option value="Documentary">Documentary</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentTitleInput">Title</label>
                        <input type="text" class="form-control" id="newContentTitleInput" @bind-value="contentModel.Title">
                    </div>
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentYearInput">Year</label>
                        <select class="form-control" id="newContentTypeInput" @bind="contentModel.Year">
                            @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 100; i--)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentCommentsInput">Comments</label>
                        <input type="text" class="form-control" id="newContentCommentsInput" @bind-value="contentModel.Comments">
                    </div>
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentImdbIdInput">IMDb ID</label>
                        <input type="text" class="form-control" id="newContentImdbIdInput" @bind-value="contentModel.ImdbId">
                    </div>
                </div><div class="row">
                    <div class="form-group col-lg-6 col-sm-12 mt-3">
                        <input type="submit" class="btn btn-primary" value="Submit" />
                        <input type="button" class="btn btn-secondary" value="Cancel" @onclick="ShowHideContentForm" />
                    </div>
                </div>
            </div>
        </div>
    </form>
}
else if (uploadForm)
{
    <div class="row-fluid justify-content-evenly">
        <div class="card-custom p-5">
            <div class="card-body-custom">
                <div class="row">
                    <div class="form-group col-lg-12 col-sm-12">
                        <h3>How to generate a compatible list of your media:</h3>
                        <br>
                        <ol>
                            <h5>If you are using Windows:</h5>
                            <br>
                            <ol>
                                <li>
                                    Open PowerShell in your media directory (navigate to your directory and type <mark><b>powershell</b></mark> in the address bar).
                                </li>
                            </ol>
                            <br>
                            <h5>If you are using Ubuntu:</h5>
                            <br>
                            <ol>
                                <li>
                                    Open the terminal and navigate to your media directory: <mark><b>cd [your media directory file path]</b></mark>.
                                </li>
                                <li>
                                    If you dont have PowerShell installed, download the latest PowerShell: <mark><b>sudo dpkg -i powershell-lts_7.3.3-1.deb_amd64.deb</b></mark>.
                                </li>
                                <li>
                                    Install the downloaded PowerShell package: <mark><b>sudo apt-get install -f</b></mark>.
                                </li>
                                <li>
                                    Type <mark><b>PowerShell</b></mark> in the terminal to start a PowerShell session.
                                </li>
                            </ol>
                            <br>
                            <li>
                                In your PowerShell window, type the following: <mark><b>get-childitem -Recurse -include *.mkv, *.mp4, *.wmv, *.mov, *.avi | select name > smsm.txt</b></mark> and press enter.
                            </li>
                            <li>
                                A file named <mark><b>smsm.txt</b></mark> will be in your current directory. This file contains a list of all of your media.
                            </li>
                            <li>
                                Upload the <mark><b>smsm.txt</b></mark> file to the upload point below.
                            </li>
                            <li>
                                Your content library will be updated.
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12">
                        <InputFile type="file" class="form-control" id="newContentUploadInput" OnChange="@UploadFile" />
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12 mt-3">
                        @if (showUploading)
                        {
                            <button class="btn btn-primary" type="button" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Uploading...</span>
                            </button>
                        }
                        else
                        {
                            <input type="button" class="btn btn-primary" value="Close" @onclick="ShowHideUploadForm" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    @if (contentList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <AuthorizeView>
            <button type="button" @onclick="() => ContentForm(null)" class="btn btn-primary mb-3">Add</button>
            <button type="button" @onclick="ShowHideUploadForm" class="btn btn-secondary mb-3">Upload</button>
        </AuthorizeView>

        <div class="card-custom mb-3 p-3">
            <div class="data-card">
                <div class="col-12 text-center">
                    <div class="row">
                        <div class="col-lg-3 col-md-12 col-sm-12">
                            <p><b>@contentList.Count</b> Items</p>
                        </div>
                        <div class="col-lg-3 col-md-12 col-sm-12">
                            <p><b>@contentList.Where(x => x.Type == "Movie").ToList().Count</b> Movies</p>
                        </div>
                        <div class="col-lg-3 col-md-12 col-sm-12">
                            <p><b>@contentList.Where(x => x.Type == "TV Series").ToList().Count</b> TV Episodes</p>
                        </div>
                        <div class="col-lg-3 col-md-12 col-sm-12">
                            <p><b>@contentList.Where(x => x.Type == "Documentary").ToList().Count</b> Documentaries</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-custom mb-3 p-3">
        <input type="text" class="form-control" @bind="searchQuery" @bind:event="oninput" @onkeyup="SearchTable" placeholder="Search..."></input>
        <div class="table-responsive">
            <table class="table table-striped">

                <thead>
                    <tr>
                        <th></th>
                        <th @onclick='() => FilterTable("DATE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Added</th>
                        <th @onclick='() => FilterTable("TYPE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Type</th>
                        <th @onclick='() => FilterTable("TITLE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Title</th>
                        <th @onclick='() => FilterTable("YEAR")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Year</th>
                        <th @onclick='() => FilterTable("COMMENTS")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Comments</th>
                        <th @onclick='() => FilterTable("IMDBID")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> IMDB ID</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var content in contentList)
                    {
                        <tr>
                            <td>@(contentList.IndexOf(content) + 1)</td>
                            <td>@content.CreatedDateTime.ToShortDateString()</td>
                            <td>@content.Type</td>
                            <td>@content.Title</td>
                            <td>@content.Year</td>
                            <td>@content.Comments</td>
                            <td><a href="https://www.imdb.com/title/@content.ImdbId" target="_blank">@(content.ImdbId == null ? "" : content.ImdbId.ToUpper())</a></td>
                            <td>
                                <span class="oi oi-pencil action-buttons" @onclick="() => ContentForm(content)"></span>
                                <span class="oi oi-trash action-buttons" @onclick="() => DeleteContent(content)"></span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        </div>
    }
}

@code {
    private string contentFormTitle = "";
    private string searchTableInput = "";
    public bool contentForm = false;
    public bool uploadForm = false;
    public bool showUploading = false;
    public string searchQuery { get; set; } = "";
    private List<smsm.Data.Models.Content>? contentList;
    private List<smsm.Data.Models.Content>? searchContentList;
    private smsm.Data.Models.Content contentModel = null;

    public void SearchTable()
    {
        if (searchQuery == "" || searchQuery == null)
        {
            contentList = searchContentList;
        }
        else
        {
            contentList = searchContentList.Where(x => x.Title.ToUpper().Contains(searchQuery.ToUpper()) || x.ImdbId.ToUpper().Contains(searchQuery.ToUpper())).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        contentList = await contentService.GetContentAsync();
        searchContentList = contentList;
    }

    private async Task SaveNewContent()
    {
        contentList = await contentService.SaveContent(contentModel);
        contentModel = null;
        ShowHideContentForm();
    }

    private async Task DeleteContent(smsm.Data.Models.Content content)
    {
        contentList = await contentService.DeleteContent(content);
    }

    private void ContentForm(smsm.Data.Models.Content content)
    {
        if (content == null)
        {
            contentFormTitle = "New Content";
            contentModel = new smsm.Data.Models.Content();
        }
        else
        {
            contentFormTitle = "Edit Content";
            contentModel = content;
        }
        ShowHideContentForm();
    }

    private async void UploadFile(InputFileChangeEventArgs document)
    {
        showUploading = true;
        MemoryStream ms = new MemoryStream();
        await document.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();
        string file = System.Text.Encoding.UTF8.GetString(bytes.ToArray());
        contentList = await contentService.UploadFileAsync(file);
        showUploading = false;
        ShowHideUploadForm();
    }

    private void ShowHideContentForm()
    {
        contentForm = !contentForm;
    }

    private void ShowHideUploadForm()
    {
        uploadForm = !uploadForm;
    }

    private void FilterTable(string filterByProperty)
    {

        switch (filterByProperty)
        {
            case "TYPE":
                contentList = contentList.OrderByDescending(x => x.Type).ToList();
                break;
            case "TITLE":
                contentList = contentList.OrderBy(x => x.Title).ToList();
                break;
            case "DATE":
                contentList = contentList.OrderByDescending(x => x.CreatedDateTime).ToList();
                break;
            case "YEAR":
                contentList = contentList.OrderByDescending(x => x.Year).ToList();
                break;
            case "COMMENTS":
                contentList = contentList.OrderByDescending(x => x.Comments).ToList();
                break;
            case "IMDBID":
                contentList = contentList.OrderByDescending(x => x.ImdbId).ToList();
                break;
        }
    }
}
