@page "/Requests"

@using smsm.Data.Models
@using smsm.Data.Services
@inject ContentService contentService
@inject UserService userService
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Requests</PageTitle>

@if (contentRequestForm)
{

    <form @onsubmit="SaveNewContentRequest">
        <div class="card-custom p-5">
            <div class="card-body-custom">
                <h3 class="mb-2">@contentRequestFormTitle</h3>
                <div class="row">
                    <div class="form-group col-12">
                        <label for="newContentRequestTypeInput">Type</label>
                        <select class="form-control" id="newContentRequestTypeInput" @bind="contentRequestModel.Type">
                            <option value=""></option>
                            <option value="Movie">Movie</option>
                            <option value="TV Series">TV Series</option>
                            <option value="Documentary">Documentary</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentRequestTitleInput">Title</label>
                        <input type="text" class="form-control" id="newContentRequestTitleInput" @bind-value="contentRequestModel.Title">
                    </div>
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentRequestYearInput">Year</label>
                        <select class="form-control" id="newContentRequestTypeInput" @bind="contentRequestModel.Year">
                            @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 100; i--)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentRequestCommentsInput">Comments</label>
                        <input type="text" class="form-control" id="newContentRequestCommentsInput" @bind-value="contentRequestModel.Comments">
                    </div>
                    <div class="form-group col-lg-6 col-sm-12">
                        <label for="newContentRequestImdbIdInput">IMDB ID</label>
                        <input type="text" class="form-control" id="newContentRequestImdbIdInput" @bind-value="contentRequestModel.ImdbId" style="text-transform:uppercase !important;">
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg-6 col-sm-12 mt-3">

                        @if (savingRequest)
                        {
                            <button class="btn btn-primary" type="button" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="sr-only">Saving...</span>
                            </button>
                        }
                        else
                        {
                            <input type="submit" class="btn btn-primary" value="Submit" />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="ShowHideContentRequestForm" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </form>
}
else
{
    @if (contentRequests == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (userService.GetCurrentUserEmail().Result != null)
        {
            <button type="button" @onclick="() => ContentRequestForm(null)" class="btn btn-primary mb-3">New Request</button>
        }
        else
        {
            <div class="card-custom p-3 mb-3 border-1">
                <div class="data-card">
                    <div class="col-12 text-center">
                        <div class="row">
                            <h4 class="fw-bold">Please login or create an account to request content.</h4>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="card-custom mb-3 p-3">
            <div class="data-card">
                <div class="col-12 text-center">
                    <div class="row">
                        <div class="col-lg-4 col-md-12 col-sm-12">
                            <p><b>@contentRequests.Count</b> Requests</p>
                        </div>
                        <div class="col-lg-4 col-md-12 col-sm-12">
                            <p><b>@contentRequests.Where(x => !x.IsComplete).ToList().Count</b> Incomplete Requests</p>
                        </div>
                        <div class="col-lg-4 col-md-12 col-sm-12">
                            <p><b>@contentRequests.Where(x => x.IsComplete).ToList().Count</b> Completed Requests</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-custom mb-3 p-3">
            <div class="table-responsive">
                <table class="table table-striped">

                    <thead>
                        <tr>
                            <th @onclick='() => FilterTable("DATE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Date</th>
                            <th @onclick='() => FilterTable("TYPE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Type</th>
                            <th @onclick='() => FilterTable("TITLE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Title</th>
                            <th @onclick='() => FilterTable("YEAR")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Year</th>
                            <th @onclick='() => FilterTable("COMMENTS")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Comments</th>
                            <th @onclick='() => FilterTable("IMDBID")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> IMDB ID</th>
                            <th @onclick='() => FilterTable("REQUESTEDBY")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Requested by</th>
                            <th @onclick='() => FilterTable("COMPLETE")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Complete</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var contentRequest in contentRequests)
                        {
                            <tr>
                                <td>@contentRequest.CreatedDateTime.ToShortDateString()</td>
                                <td>@contentRequest.Type</td>
                                <td>@contentRequest.Title</td>
                                <td>@contentRequest.Year</td>
                                <td>@contentRequest.Comments</td>
                                <td><a href="https://www.imdb.com/title/@contentRequest.ImdbId" target="_blank">@(contentRequest.ImdbId == null ? "" : contentRequest.ImdbId.ToUpper())</a></td>
                                <td>@contentRequest.UserName</td>
                                <td>
                                    @if (@contentRequest.IsComplete)
                                    {
                                        <span class="oi oi-circle-check" style="color:green"></span>
                                    }
                                    else
                                    {
                                        <span class="oi oi-circle-x" style="color: red"></span>
                                    }
                                </td>

                                <td>
                                    @if (userService.IsAdmin().Result)
                                    {
                                        @if (@contentRequest.IsComplete)
                                        {
                                            <span class="oi oi-circle-x action-buttons" @onclick="() => ChangeContentRequestStatus(contentRequest.Id)"></span>
                                        }
                                        else
                                        {
                                            <span class="oi oi-circle-check action-buttons" @onclick="() => ChangeContentRequestStatus(contentRequest.Id)"></span>
                                        }
                                    }
                                    @if (userService.GetCurrentUserEmail().Result != null)
                                    {
                                        <span class="oi oi-pencil action-buttons" @onclick="() => ContentRequestForm(contentRequest)"></span>
                                    }
                                    @if (userService.IsAdmin().Result)
                                    {
                                        <span class="oi oi-trash action-buttons" @onclick="() => DeleteContentRequest(contentRequest)"></span>
                                    }

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    public bool contentRequestForm = false;
    private List<ContentRequest>? contentRequests;
    private ContentRequest contentRequestModel = null;
    private string contentRequestFormTitle = "";
    private string searchTableInput = "";
    private bool savingRequest = false;

    protected override async Task OnInitializedAsync()
    {
        contentRequests = await contentService.GetContentRequestsAsync();
        contentRequests = contentRequests.Distinct().ToList();
    }

    private async Task SaveNewContentRequest()
    {
        savingRequest = true;
        contentRequests = await contentService.SaveContentRequest(contentRequestModel);
        contentRequestModel = null;
        savingRequest = false;
        ShowHideContentRequestForm();
    }

    private async Task DeleteContentRequest(ContentRequest contentRequest)
    {
        contentRequests = await contentService.DeleteContentRequest(contentRequest);
    }

    private void ContentRequestForm(ContentRequest contentRequest)
    {
        if (contentRequest == null)
        {
            contentRequestFormTitle = "New Content Request";
            contentRequestModel = new ContentRequest();
        }
        else
        {
            contentRequestFormTitle = "Edit Content Request";
            contentRequestModel = contentRequest;
        }
        ShowHideContentRequestForm();
    }

    private void ShowHideContentRequestForm()
    {
        contentRequestForm = !contentRequestForm;
    }

    private async void ChangeContentRequestStatus(int id)
    {
        contentRequests = await contentService.ChangeContentRequestStatus(id);
    }

    private void FilterTable(string filterByProperty)
    {

        switch (filterByProperty)
        {
            case "TYPE":
                contentRequests = contentRequests.OrderByDescending(x => x.Type).ToList();
                break;
            case "TITLE":
                contentRequests = contentRequests.OrderBy(x => x.Title).ToList();
                break;
            case "DATE":
                contentRequests = contentRequests.OrderByDescending(x => x.CreatedDateTime).ToList();
                break;
            case "REQUESTEDBY":
                contentRequests = contentRequests.OrderBy(x => x.UserName).ToList();
                break;
            case "COMPLETE":
                contentRequests = contentRequests.OrderByDescending(x => x.IsComplete).ToList();
                break;
            case "YEAR":
                contentRequests = contentRequests.OrderByDescending(x => x.Year).ToList();
                break;
            case "COMMENTS":
                contentRequests = contentRequests.OrderByDescending(x => x.Comments).ToList();
                break;
            case "IMDBID":
                contentRequests = contentRequests.OrderByDescending(x => x.ImdbId).ToList();
                break;
        }
    }


}
